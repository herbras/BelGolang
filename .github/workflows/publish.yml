name: Build and Publish NPM Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version from tag
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Update package.json version
        run: |
          cd npm-package
          # Update version in package.json using jq
          jq --arg version "${{ steps.version.outputs.version }}" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated package.json to version ${{ steps.version.outputs.version }}"
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          
      - name: Install dependencies
        run: go mod download
        
      - name: Run tests
        run: go test ./...
        
      - name: Create bin directory structure
        run: |
          mkdir -p npm-package/bin/{darwin-x64,darwin-arm64,linux-x64,linux-arm64,win32-x64,win32-arm64}
          
      - name: Build binaries for all platforms (optimized with timezone fix)
        run: |
          # Build with optimization flags and static linking (timezone fix included via main.go import)
          
          # macOS
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -trimpath -o npm-package/bin/darwin-x64/salat .
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -trimpath -o npm-package/bin/darwin-arm64/salat .
          
          # Linux
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -trimpath -o npm-package/bin/linux-x64/salat .
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -trimpath -o npm-package/bin/linux-arm64/salat .
          
          # Windows
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -trimpath -o npm-package/bin/win32-x64/salat.exe .
          CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -trimpath -o npm-package/bin/win32-arm64/salat.exe .
          
      - name: Build WASM (optimized)
        run: |
          # Build WebAssembly module with optimization
          CGO_ENABLED=0 GOOS=js GOARCH=wasm go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -trimpath -o wasm/salat.wasm ./cmd/wasm
          
          # Copy Go WASM exec helper
          cp "$(go env GOROOT)/misc/wasm/wasm_exec.js" wasm/
          
      - name: Show binary sizes
        run: |
          echo "📊 Binary sizes:"
          find npm-package/bin -name "salat*" -exec ls -lh {} \; | awk '{print "  " $9 ": " $5}'
          
          echo "📦 WASM size:"
          ls -lh wasm/salat.wasm | awk '{print "  " $9 ": " $5}'
          
      - name: Make binaries executable
        run: |
          chmod +x npm-package/bin/*/salat
          
      - name: Test binaries
        run: |
          echo "🧪 Testing binaries..."
          for binary in npm-package/bin/*/salat*; do
            if [[ "$binary" == *"win32"* ]]; then
              echo "  Skipping Windows binary on Linux runner: $binary"
            else
              echo "  Testing: $binary"
              if $binary --help > /dev/null 2>&1; then
                echo "    ✅ OK"
              else
                echo "    ❌ Failed"
                exit 1
              fi
            fi
          done
          
      - name: Copy package files
        run: |
          # Copy README.md to npm-package
          if [ -f "README.md" ]; then
            cp README.md npm-package/
          fi
          
          # Create LICENSE file
          echo 'MIT' > npm-package/LICENSE
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Verify package.json
        run: |
          cd npm-package
          echo "📋 Package info:"
          echo "  Name: $(jq -r '.name' package.json)"
          echo "  Version: $(jq -r '.version' package.json)"
          echo "  Files:"
          jq -r '.files[]' package.json | sed 's/^/    /'
          
      - name: Publish to NPM
        run: |
          cd npm-package
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Release ${{ steps.version.outputs.tag }}"
          files: |
            npm-package/bin/**/*
            wasm/salat.wasm
            wasm/wasm_exec.js
          body: |
            ## 🚀 Release ${{ steps.version.outputs.tag }}
            
            ### 📦 Downloads
            - **NPM**: `npm install -g salat-cli@${{ steps.version.outputs.version }}`
            - **WASM**: Download `salat.wasm` for browser usage
            
            ### 🎯 Optimizations
            - 79% smaller binaries (CGO_ENABLED=0 + optimization flags)
            - Embedded timezone database (works offline)
            - Cross-platform support (Windows, macOS, Linux × AMD64/ARM64)
            
            ### 📊 Binary Sizes
            All binaries are optimized with `-ldflags="-s -w"` and `-trimpath`.
            
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}